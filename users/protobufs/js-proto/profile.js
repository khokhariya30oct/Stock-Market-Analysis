/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.Profile');
goog.provide('proto.Profile.BungeeData');
goog.provide('proto.Profile.IntervalData');
goog.provide('proto.Profile.IntervalType');
goog.provide('proto.Profile.PrimaryData');
goog.provide('proto.Profile.Tickers');
goog.provide('proto.Profile.TypeAndAge');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Profile.repeatedFields_, null);
};
goog.inherits(proto.Profile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.displayName = 'proto.Profile';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Profile.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastUpdated: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ongoing: jspb.Message.getFieldWithDefault(msg, 2, false),
    scriptUpdated: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tickersList: jspb.Message.toObjectList(msg.getTickersList(),
    proto.Profile.Tickers.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile}
 */
proto.Profile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile;
  return proto.Profile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile}
 */
proto.Profile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastUpdated(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOngoing(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setScriptUpdated(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 5:
      var value = new proto.Profile.Tickers;
      reader.readMessage(value,proto.Profile.Tickers.deserializeBinaryFromReader);
      msg.addTickers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Profile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Profile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastUpdated();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOngoing();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getScriptUpdated();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTickersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Profile.Tickers.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Profile.IntervalType = {
  _5M: 0,
  _15M: 1,
  _60M: 2,
  _4H: 3,
  _1D: 4,
  _1W: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile.TypeAndAge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Profile.TypeAndAge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.TypeAndAge.displayName = 'proto.Profile.TypeAndAge';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.TypeAndAge.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.TypeAndAge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile.TypeAndAge} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.TypeAndAge.toObject = function(includeInstance, msg) {
  var f, obj = {
    age: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile.TypeAndAge}
 */
proto.Profile.TypeAndAge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile.TypeAndAge;
  return proto.Profile.TypeAndAge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile.TypeAndAge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile.TypeAndAge}
 */
proto.Profile.TypeAndAge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.TypeAndAge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Profile.TypeAndAge.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Profile.TypeAndAge} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.TypeAndAge.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAge();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 age = 1;
 * @return {number}
 */
proto.Profile.TypeAndAge.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Profile.TypeAndAge.prototype.setAge = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.Profile.TypeAndAge.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Profile.TypeAndAge.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile.PrimaryData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Profile.PrimaryData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.PrimaryData.displayName = 'proto.Profile.PrimaryData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.PrimaryData.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.PrimaryData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile.PrimaryData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.PrimaryData.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    time: jspb.Message.getFieldWithDefault(msg, 2, ""),
    typeAge: (f = msg.getTypeAge()) && proto.Profile.TypeAndAge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile.PrimaryData}
 */
proto.Profile.PrimaryData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile.PrimaryData;
  return proto.Profile.PrimaryData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile.PrimaryData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile.PrimaryData}
 */
proto.Profile.PrimaryData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTime(value);
      break;
    case 3:
      var value = new proto.Profile.TypeAndAge;
      reader.readMessage(value,proto.Profile.TypeAndAge.deserializeBinaryFromReader);
      msg.setTypeAge(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.PrimaryData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Profile.PrimaryData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Profile.PrimaryData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.PrimaryData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getTime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTypeAge();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Profile.TypeAndAge.serializeBinaryToWriter
    );
  }
};


/**
 * optional float price = 1;
 * @return {number}
 */
proto.Profile.PrimaryData.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Profile.PrimaryData.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string time = 2;
 * @return {string}
 */
proto.Profile.PrimaryData.prototype.getTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Profile.PrimaryData.prototype.setTime = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TypeAndAge type_age = 3;
 * @return {?proto.Profile.TypeAndAge}
 */
proto.Profile.PrimaryData.prototype.getTypeAge = function() {
  return /** @type{?proto.Profile.TypeAndAge} */ (
    jspb.Message.getWrapperField(this, proto.Profile.TypeAndAge, 3));
};


/** @param {?proto.Profile.TypeAndAge|undefined} value */
proto.Profile.PrimaryData.prototype.setTypeAge = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Profile.PrimaryData.prototype.clearTypeAge = function() {
  this.setTypeAge(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Profile.PrimaryData.prototype.hasTypeAge = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile.BungeeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Profile.BungeeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.BungeeData.displayName = 'proto.Profile.BungeeData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.BungeeData.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.BungeeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile.BungeeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.BungeeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    y: jspb.Message.getFieldWithDefault(msg, 1, 0),
    g: jspb.Message.getFieldWithDefault(msg, 2, 0),
    r: jspb.Message.getFieldWithDefault(msg, 3, 0),
    b: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile.BungeeData}
 */
proto.Profile.BungeeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile.BungeeData;
  return proto.Profile.BungeeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile.BungeeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile.BungeeData}
 */
proto.Profile.BungeeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setG(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setR(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.BungeeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Profile.BungeeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Profile.BungeeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.BungeeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getG();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getR();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getB();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional int32 y = 1;
 * @return {number}
 */
proto.Profile.BungeeData.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Profile.BungeeData.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 g = 2;
 * @return {number}
 */
proto.Profile.BungeeData.prototype.getG = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Profile.BungeeData.prototype.setG = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 r = 3;
 * @return {number}
 */
proto.Profile.BungeeData.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Profile.BungeeData.prototype.setR = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 b = 4;
 * @return {number}
 */
proto.Profile.BungeeData.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Profile.BungeeData.prototype.setB = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile.IntervalData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Profile.IntervalData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.IntervalData.displayName = 'proto.Profile.IntervalData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.IntervalData.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.IntervalData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile.IntervalData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.IntervalData.toObject = function(includeInstance, msg) {
  var f, obj = {
    interval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    waveRating: jspb.Message.getFieldWithDefault(msg, 2, ""),
    divergenceSymbol: jspb.Message.getFieldWithDefault(msg, 3, false),
    primary: (f = msg.getPrimary()) && proto.Profile.PrimaryData.toObject(includeInstance, f),
    secondary: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rsiThreshold: (f = msg.getRsiThreshold()) && proto.Profile.TypeAndAge.toObject(includeInstance, f),
    candlestickShape: (f = msg.getCandlestickShape()) && proto.Profile.TypeAndAge.toObject(includeInstance, f),
    smaCross: (f = msg.getSmaCross()) && proto.Profile.TypeAndAge.toObject(includeInstance, f),
    bungee: (f = msg.getBungee()) && proto.Profile.BungeeData.toObject(includeInstance, f),
    royalSignal: (f = msg.getRoyalSignal()) && proto.Profile.TypeAndAge.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile.IntervalData}
 */
proto.Profile.IntervalData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile.IntervalData;
  return proto.Profile.IntervalData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile.IntervalData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile.IntervalData}
 */
proto.Profile.IntervalData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Profile.IntervalType} */ (reader.readEnum());
      msg.setInterval(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWaveRating(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDivergenceSymbol(value);
      break;
    case 4:
      var value = new proto.Profile.PrimaryData;
      reader.readMessage(value,proto.Profile.PrimaryData.deserializeBinaryFromReader);
      msg.setPrimary(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondary(value);
      break;
    case 6:
      var value = new proto.Profile.TypeAndAge;
      reader.readMessage(value,proto.Profile.TypeAndAge.deserializeBinaryFromReader);
      msg.setRsiThreshold(value);
      break;
    case 7:
      var value = new proto.Profile.TypeAndAge;
      reader.readMessage(value,proto.Profile.TypeAndAge.deserializeBinaryFromReader);
      msg.setCandlestickShape(value);
      break;
    case 8:
      var value = new proto.Profile.TypeAndAge;
      reader.readMessage(value,proto.Profile.TypeAndAge.deserializeBinaryFromReader);
      msg.setSmaCross(value);
      break;
    case 9:
      var value = new proto.Profile.BungeeData;
      reader.readMessage(value,proto.Profile.BungeeData.deserializeBinaryFromReader);
      msg.setBungee(value);
      break;
    case 10:
      var value = new proto.Profile.TypeAndAge;
      reader.readMessage(value,proto.Profile.TypeAndAge.deserializeBinaryFromReader);
      msg.setRoyalSignal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.IntervalData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Profile.IntervalData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Profile.IntervalData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.IntervalData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterval();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getWaveRating();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDivergenceSymbol();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getPrimary();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Profile.PrimaryData.serializeBinaryToWriter
    );
  }
  f = message.getSecondary();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getRsiThreshold();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Profile.TypeAndAge.serializeBinaryToWriter
    );
  }
  f = message.getCandlestickShape();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Profile.TypeAndAge.serializeBinaryToWriter
    );
  }
  f = message.getSmaCross();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Profile.TypeAndAge.serializeBinaryToWriter
    );
  }
  f = message.getBungee();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.Profile.BungeeData.serializeBinaryToWriter
    );
  }
  f = message.getRoyalSignal();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Profile.TypeAndAge.serializeBinaryToWriter
    );
  }
};


/**
 * optional IntervalType interval = 1;
 * @return {!proto.Profile.IntervalType}
 */
proto.Profile.IntervalData.prototype.getInterval = function() {
  return /** @type {!proto.Profile.IntervalType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Profile.IntervalType} value */
proto.Profile.IntervalData.prototype.setInterval = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string wave_rating = 2;
 * @return {string}
 */
proto.Profile.IntervalData.prototype.getWaveRating = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Profile.IntervalData.prototype.setWaveRating = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool divergence_symbol = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Profile.IntervalData.prototype.getDivergenceSymbol = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.Profile.IntervalData.prototype.setDivergenceSymbol = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional PrimaryData primary = 4;
 * @return {?proto.Profile.PrimaryData}
 */
proto.Profile.IntervalData.prototype.getPrimary = function() {
  return /** @type{?proto.Profile.PrimaryData} */ (
    jspb.Message.getWrapperField(this, proto.Profile.PrimaryData, 4));
};


/** @param {?proto.Profile.PrimaryData|undefined} value */
proto.Profile.IntervalData.prototype.setPrimary = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Profile.IntervalData.prototype.clearPrimary = function() {
  this.setPrimary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Profile.IntervalData.prototype.hasPrimary = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 secondary = 5;
 * @return {number}
 */
proto.Profile.IntervalData.prototype.getSecondary = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Profile.IntervalData.prototype.setSecondary = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional TypeAndAge rsi_threshold = 6;
 * @return {?proto.Profile.TypeAndAge}
 */
proto.Profile.IntervalData.prototype.getRsiThreshold = function() {
  return /** @type{?proto.Profile.TypeAndAge} */ (
    jspb.Message.getWrapperField(this, proto.Profile.TypeAndAge, 6));
};


/** @param {?proto.Profile.TypeAndAge|undefined} value */
proto.Profile.IntervalData.prototype.setRsiThreshold = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.Profile.IntervalData.prototype.clearRsiThreshold = function() {
  this.setRsiThreshold(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Profile.IntervalData.prototype.hasRsiThreshold = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TypeAndAge candlestick_shape = 7;
 * @return {?proto.Profile.TypeAndAge}
 */
proto.Profile.IntervalData.prototype.getCandlestickShape = function() {
  return /** @type{?proto.Profile.TypeAndAge} */ (
    jspb.Message.getWrapperField(this, proto.Profile.TypeAndAge, 7));
};


/** @param {?proto.Profile.TypeAndAge|undefined} value */
proto.Profile.IntervalData.prototype.setCandlestickShape = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.Profile.IntervalData.prototype.clearCandlestickShape = function() {
  this.setCandlestickShape(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Profile.IntervalData.prototype.hasCandlestickShape = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TypeAndAge sma_cross = 8;
 * @return {?proto.Profile.TypeAndAge}
 */
proto.Profile.IntervalData.prototype.getSmaCross = function() {
  return /** @type{?proto.Profile.TypeAndAge} */ (
    jspb.Message.getWrapperField(this, proto.Profile.TypeAndAge, 8));
};


/** @param {?proto.Profile.TypeAndAge|undefined} value */
proto.Profile.IntervalData.prototype.setSmaCross = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.Profile.IntervalData.prototype.clearSmaCross = function() {
  this.setSmaCross(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Profile.IntervalData.prototype.hasSmaCross = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional BungeeData bungee = 9;
 * @return {?proto.Profile.BungeeData}
 */
proto.Profile.IntervalData.prototype.getBungee = function() {
  return /** @type{?proto.Profile.BungeeData} */ (
    jspb.Message.getWrapperField(this, proto.Profile.BungeeData, 9));
};


/** @param {?proto.Profile.BungeeData|undefined} value */
proto.Profile.IntervalData.prototype.setBungee = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.Profile.IntervalData.prototype.clearBungee = function() {
  this.setBungee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Profile.IntervalData.prototype.hasBungee = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TypeAndAge royal_signal = 10;
 * @return {?proto.Profile.TypeAndAge}
 */
proto.Profile.IntervalData.prototype.getRoyalSignal = function() {
  return /** @type{?proto.Profile.TypeAndAge} */ (
    jspb.Message.getWrapperField(this, proto.Profile.TypeAndAge, 10));
};


/** @param {?proto.Profile.TypeAndAge|undefined} value */
proto.Profile.IntervalData.prototype.setRoyalSignal = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.Profile.IntervalData.prototype.clearRoyalSignal = function() {
  this.setRoyalSignal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Profile.IntervalData.prototype.hasRoyalSignal = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile.Tickers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Profile.Tickers.repeatedFields_, null);
};
goog.inherits(proto.Profile.Tickers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.Tickers.displayName = 'proto.Profile.Tickers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Profile.Tickers.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.Tickers.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.Tickers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile.Tickers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.Tickers.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    price: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    nextEarningDate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    change: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    last30daysAvgVolume: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastDayVolume: jspb.Message.getFieldWithDefault(msg, 6, 0),
    position: jspb.Message.getFieldWithDefault(msg, 7, 0),
    note: jspb.Message.getFieldWithDefault(msg, 8, ""),
    noteUpdated: jspb.Message.getFieldWithDefault(msg, 9, ""),
    rating: jspb.Message.getFieldWithDefault(msg, 10, 0),
    grade: jspb.Message.getFieldWithDefault(msg, 11, ""),
    targetValue: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    watchList: jspb.Message.getFieldWithDefault(msg, 13, false),
    intervalDataList: jspb.Message.toObjectList(msg.getIntervalDataList(),
    proto.Profile.IntervalData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile.Tickers}
 */
proto.Profile.Tickers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile.Tickers;
  return proto.Profile.Tickers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile.Tickers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile.Tickers}
 */
proto.Profile.Tickers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextEarningDate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChange(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLast30daysAvgVolume(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastDayVolume(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPosition(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNote(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setNoteUpdated(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRating(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrade(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTargetValue(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWatchList(value);
      break;
    case 14:
      var value = new proto.Profile.IntervalData;
      reader.readMessage(value,proto.Profile.IntervalData.deserializeBinaryFromReader);
      msg.addIntervalData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.Tickers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Profile.Tickers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Profile.Tickers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Profile.Tickers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getNextEarningDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChange();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getLast30daysAvgVolume();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLastDayVolume();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPosition();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getNote();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getNoteUpdated();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRating();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getGrade();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTargetValue();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getWatchList();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getIntervalDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.Profile.IntervalData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ticker = 1;
 * @return {string}
 */
proto.Profile.Tickers.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Profile.Tickers.prototype.setTicker = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float price = 2;
 * @return {number}
 */
proto.Profile.Tickers.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Profile.Tickers.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string next_earning_date = 3;
 * @return {string}
 */
proto.Profile.Tickers.prototype.getNextEarningDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Profile.Tickers.prototype.setNextEarningDate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float change = 4;
 * @return {number}
 */
proto.Profile.Tickers.prototype.getChange = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Profile.Tickers.prototype.setChange = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int64 last30days_avg_volume = 5;
 * @return {number}
 */
proto.Profile.Tickers.prototype.getLast30daysAvgVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Profile.Tickers.prototype.setLast30daysAvgVolume = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 last_day_volume = 6;
 * @return {number}
 */
proto.Profile.Tickers.prototype.getLastDayVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Profile.Tickers.prototype.setLastDayVolume = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 position = 7;
 * @return {number}
 */
proto.Profile.Tickers.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Profile.Tickers.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string note = 8;
 * @return {string}
 */
proto.Profile.Tickers.prototype.getNote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Profile.Tickers.prototype.setNote = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string note_updated = 9;
 * @return {string}
 */
proto.Profile.Tickers.prototype.getNoteUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Profile.Tickers.prototype.setNoteUpdated = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 rating = 10;
 * @return {number}
 */
proto.Profile.Tickers.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Profile.Tickers.prototype.setRating = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string grade = 11;
 * @return {string}
 */
proto.Profile.Tickers.prototype.getGrade = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.Profile.Tickers.prototype.setGrade = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional float target_value = 12;
 * @return {number}
 */
proto.Profile.Tickers.prototype.getTargetValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.Profile.Tickers.prototype.setTargetValue = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional bool watch_list = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Profile.Tickers.prototype.getWatchList = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.Profile.Tickers.prototype.setWatchList = function(value) {
  jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * repeated IntervalData interval_data = 14;
 * @return {!Array<!proto.Profile.IntervalData>}
 */
proto.Profile.Tickers.prototype.getIntervalDataList = function() {
  return /** @type{!Array<!proto.Profile.IntervalData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Profile.IntervalData, 14));
};


/** @param {!Array<!proto.Profile.IntervalData>} value */
proto.Profile.Tickers.prototype.setIntervalDataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.Profile.IntervalData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Profile.IntervalData}
 */
proto.Profile.Tickers.prototype.addIntervalData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.Profile.IntervalData, opt_index);
};


proto.Profile.Tickers.prototype.clearIntervalDataList = function() {
  this.setIntervalDataList([]);
};


/**
 * optional string last_updated = 1;
 * @return {string}
 */
proto.Profile.prototype.getLastUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Profile.prototype.setLastUpdated = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool ongoing = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Profile.prototype.getOngoing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Profile.prototype.setOngoing = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string script_updated = 3;
 * @return {string}
 */
proto.Profile.prototype.getScriptUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Profile.prototype.setScriptUpdated = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.Profile.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Profile.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Tickers tickers = 5;
 * @return {!Array<!proto.Profile.Tickers>}
 */
proto.Profile.prototype.getTickersList = function() {
  return /** @type{!Array<!proto.Profile.Tickers>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Profile.Tickers, 5));
};


/** @param {!Array<!proto.Profile.Tickers>} value */
proto.Profile.prototype.setTickersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Profile.Tickers=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Profile.Tickers}
 */
proto.Profile.prototype.addTickers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Profile.Tickers, opt_index);
};


proto.Profile.prototype.clearTickersList = function() {
  this.setTickersList([]);
};


